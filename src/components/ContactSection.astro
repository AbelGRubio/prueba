<!-- src/components/ContactSection.astro -->

---
import { handleSubmit } from '../core/contact.functions';
const { isMain = false } = Astro.props;
---

      
<section class={`${isMain ? '' : 'py-16 mt-25'} text-center bg-white `}
>
  {!isMain && (
    <div class="animate-fade-in-up">
      <div class="text-3xl md:text-4xl font-bold mb-4">Contact Me</div>
      <div class="text-lg text-gray-600 max-w-2xl mx-auto">
        I'd love to hear from you! Reach out today.
      </div>
    </div>
  )}

  <div class="max-w-lg mx-auto mt-8 animate-fade-in-up">
    <form id="contact-form" class="space-y-4">
      <div>
        <label class="block text-left text-gray-500 font-medium">Email</label>
        <input
          type="email"
          name="email"
          placeholder="Enter your email"
          class="w-full p-3 shadow-xl rounded-md focus:outline-none focus:ring-2"
        />
        <p class="text-red-500 text-sm" data-error="email"></p>
      </div>

      <div>
        <label class="block text-left text-gray-500 font-medium">Subject</label>
        <input
          type="text"
          name="subject"
          placeholder="Subject"
          class="w-full p-3 shadow-xl rounded-md focus:outline-none focus:ring-2"
        />
        <p class="text-red-500 text-sm" data-error="subject"></p>
      </div>

      <div>
        <label class="block text-left text-gray-500 font-medium">Message</label>
        <textarea
          name="message"
          placeholder="Type your message"
          rows="5"
          class="w-full p-3 shadow-xl rounded-md focus:outline-none focus:ring-2"
        ></textarea>
        <p class="text-red-500 text-sm" data-error="message"></p>
      </div>

      <div class="flex items-center text-left">
        <input
          type="checkbox"
          name="termsAccepted"
          class="mr-2"
        />
        <label class="text-gray-700">I accept the Terms</label>
      </div>
      <p class="text-red-500 text-sm" data-error="termsAccepted"></p>

      <button
        type="submit"
        class="btn-normal-pp btn-blue-400-reverse opacity-50 cursor-not-allowed"
        disabled
      >
        Submit
      </button>
    </form>
  </div>
</section>

<script is:inline>
document.addEventListener('DOMContentLoaded', () => {
  const form = document.getElementById('contact-form');

  let formData = {
    email: "",
    subject: "",
    message: "",
    termsAccepted: false
  };

  let errors = {};
  let isSubmitted = true;
  let isFormValid = false;

  form.querySelectorAll('input, textarea').forEach(field => {
    field.addEventListener('change', (e) => {
      const { name, type, value, checked } = e.target;
      
      formData[name] = type === 'checkbox' ? checked : value;
        console.log("etnntra", formData);
      if (isSubmitted) {
        validateForm();
      }
    });
  });

  function validateForm() {
    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    errors = {
      email: formData.email.trim()
        ? emailRegex.test(formData.email)
          ? ""
          : "Invalid email format"
        : "Email is required",
      subject: formData.subject.trim() ? "" : "Subject is required",
      message: formData.message.trim() ? "" : "Message is required",
      termsAccepted: formData.termsAccepted ? "" : "You must accept the terms"
    };

    isFormValid = Object.values(errors).every(error => error === "");
    updateErrorMessages();
    updateSubmitButton();
  }

  function updateErrorMessages() {
    Object.keys(errors).forEach(key => {
      const errorElement = form.querySelector(`[data-error="${key}"]`);
      if (errorElement) {
        errorElement.textContent = errors[key];
      }
    });
  }

  function updateSubmitButton() {
    const submitButton = form.querySelector('button[type="submit"]');
    if (submitButton) {
      submitButton.disabled = !isFormValid;
      submitButton.classList.toggle('opacity-50', !isFormValid);
      submitButton.classList.toggle('cursor-not-allowed', !isFormValid);
    }
  }

  form.addEventListener('submit', (e) => {
    e.preventDefault();
    isSubmitted = true;
    validateForm();

    if (isFormValid) {
      console.log('Formulario válido, enviando...', formData);
      handleSubmit(e, form);
    }
  });
});
</script>

<script type="module" is:inline>
  import { handleSubmit } from '/src/core/contact.functions.ts'; // IMPORTANTE: ruta absoluta o relativa

  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('contact-form');
    if (!form) return;

    form.addEventListener('submit', async (e) => {
      try {
        await handleSubmit(e, form);
      } catch (err) {
        console.error('Error en el envío del formulario:', err);
      }
    });
  });
</script>

<style>
.btn-normal-pp {
  padding: 0.75rem 1.5rem;
  border-radius: 0.375rem;
  font-weight: 500;
  transition: all 0.2s;
}

.btn-blue-400-reverse {
  color: #60a5fa;
  background-color: transparent;
  border: 1px solid #60a5fa;
}

.btn-blue-400-reverse:hover {
  color: white;
  background-color: #60a5fa;
}

.focus\:ring-blue-500:focus {
  --tw-ring-color: #3b82f6;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.5);
}

.border-red-500 {
  border-color: #ef4444;
}

.focus\:ring-red-500:focus {
  --tw-ring-color: #ef4444;
  box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.5);
}
</style>
